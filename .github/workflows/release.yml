name: Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write
  packages: write
  statuses: write
  actions: read

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  DOCKER_REGISTRY: registry.digitalocean.com
  DROPLET_NAME: n8n-server
  N8N_VERSION: latest
  N8N_BASIC_AUTH_USER: admin
  DO_SSH_KEY_PATH: ~/.ssh/id_rsa

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ssh_setup: ${{ steps.ssh_setup.outputs.success }}
      env_vars: ${{ steps.env_vars.outputs.json }}
    steps:
      - name: Set up SSH
        id: ssh_setup
        shell: bash
        run: |
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Decode and write the SSH key
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Verify the key format
          if ! grep -q "BEGIN .* PRIVATE KEY" ~/.ssh/id_rsa; then
            echo "Error: Invalid SSH key format - missing header"
            exit 1
          fi
          
          if ! grep -q "END .* PRIVATE KEY" ~/.ssh/id_rsa; then
            echo "Error: Invalid SSH key format - missing footer"
            exit 1
          fi
          
          # Add known hosts
          ssh-keyscan -H digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -H registry.digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          
          # Test SSH key
          if ssh-keygen -l -f ~/.ssh/id_rsa &>/dev/null; then
            echo "SSH key is valid"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid SSH key"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Start ssh-agent
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Prepare environment variables
        id: env_vars
        run: |
          echo "json=$(cat << 'EOF' | jq -c .
          {
            "N8N_BASIC_AUTH_ACTIVE": "true",
            "N8N_BASIC_AUTH_USER": "admin",
            "N8N_DOMAIN": "${{ secrets.N8N_DOMAIN }}",
            "N8N_ENCRYPTION_KEY": "${{ secrets.N8N_ENCRYPTION_KEY }}",
            "N8N_BASIC_AUTH_PASSWORD": "${{ secrets.N8N_BASIC_AUTH_PASSWORD }}"
          }
          EOF
          )" >> $GITHUB_OUTPUT

  pipeline:
    needs: setup
    if: needs.setup.outputs.ssh_setup == 'true'
    uses: felipepimentel/daggerverse/.github/workflows/reusable-n8n-ci-cd.yml@main
    with:
      repository: ${{ github.repository }}
      dagger_version: "0.15.1"
      app_name: "n8n"
      workdir: "."
      env_vars: ${{ needs.setup.outputs.env_vars }}
    secrets:
      digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
