name: Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write
  packages: write
  statuses: write
  actions: read

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  DOCKER_REGISTRY: registry.digitalocean.com
  DROPLET_NAME: n8n-server
  N8N_VERSION: latest
  N8N_BASIC_AUTH_USER: admin
  # Senha padr√£o para ambiente de teste
  N8N_TEST_PASSWORD: "n8n-test-password"

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      is_test_env: ${{ steps.check_env.outputs.is_test }}
      auth_password: ${{ steps.check_env.outputs.password }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check environment
        id: check_env
        run: |
          # Determina se √© ambiente de teste baseado na branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is_test=false" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}" >> $GITHUB_OUTPUT
          else
            echo "is_test=true" >> $GITHUB_OUTPUT
            echo "password=${{ env.N8N_TEST_PASSWORD }}" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Test environment detected - using default password"
          fi

      - name: Validate DigitalOcean Token
        run: |
          echo "üîç Testing DigitalOcean API Token..."
          response=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/account")
          
          if echo "$response" | jq -e '.account' >/dev/null; then
            echo "‚úÖ DigitalOcean API Token is valid"
          else
            echo "‚ùå Error: Invalid DigitalOcean API Token"
            echo "Response: $response"
            exit 1
          fi

      - name: Validate Domain
        run: |
          echo "üîç Testing domain configuration..."
          domain="${{ secrets.N8N_DOMAIN }}"
          
          if [[ ! "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
            echo "‚ùå Error: Invalid domain format: $domain"
            echo "Domain should be a valid hostname (e.g., n8n.example.com)"
            exit 1
          fi
          
          # Verifica se o dom√≠nio resolve
          if host "$domain" >/dev/null 2>&1; then
            echo "‚úÖ Domain $domain is resolvable"
          else
            echo "‚ö†Ô∏è Warning: Domain $domain is not resolvable yet"
            echo "Make sure to configure DNS after deployment"
          fi

      - name: Validate Encryption Key
        run: |
          echo "üîç Testing encryption key..."
          key="${{ secrets.N8N_ENCRYPTION_KEY }}"
          
          if [[ ! "$key" =~ ^[a-fA-F0-9]{32}$ ]]; then
            echo "‚ùå Error: Invalid encryption key format"
            echo "Key should be a 32-character hexadecimal string"
            exit 1
          fi
          
          echo "‚úÖ Encryption key format is valid"

      - name: Validate Auth Password
        if: steps.check_env.outputs.is_test != 'true'
        run: |
          echo "üîç Testing authentication password..."
          password="${{ secrets.N8N_BASIC_AUTH_PASSWORD }}"
          
          # Verifica comprimento m√≠nimo
          if [ ${#password} -lt 8 ]; then
            echo "‚ùå Error: Password is too short (minimum 8 characters)"
            exit 1
          fi
          
          # Verifica complexidade
          if [[ ! "$password" =~ [A-Z] ]] || [[ ! "$password" =~ [a-z] ]] || [[ ! "$password" =~ [0-9] ]]; then
            echo "‚ùå Error: Password must contain uppercase, lowercase, and numbers"
            exit 1
          fi
          
          echo "‚úÖ Password meets security requirements"

      - name: Summary
        run: |
          echo "üéâ All validations passed!"
          echo "Environment: ${{ steps.check_env.outputs.is_test == 'true' && 'TEST' || 'PRODUCTION' }}"
          if [ "${{ steps.check_env.outputs.is_test }}" == "true" ]; then
            echo "‚ö†Ô∏è Using default test password"
          fi

  deploy:
    needs: validate
    uses: felipepimentel/daggerverse/.github/workflows/reusable-n8n-ci-cd.yml@main
    with:
      repository: ${{ github.repository }}
      dagger_version: "0.15.1"
      app_name: "n8n"
      workdir: "."
      region: "nyc1"
    secrets:
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      N8N_BASIC_AUTH_PASSWORD: ${{ needs.validate.outputs.auth_password }}
      N8N_DOMAIN: ${{ secrets.N8N_DOMAIN }}
      N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
