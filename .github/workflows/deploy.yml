name: Deploy n8n

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      dagger_version:
        required: true
        type: string
      app_name:
        required: true
        type: string
      workdir:
        required: true
        type: string
      region:
        required: true
        type: string
    secrets:
      DIGITALOCEAN_ACCESS_TOKEN:
        required: true
      N8N_BASIC_AUTH_PASSWORD:
        required: true
      N8N_DOMAIN:
        required: true
      N8N_ENCRYPTION_KEY:
        required: true

env:
  DOCKER_REGISTRY: registry.digitalocean.com
  DROPLET_NAME: n8n-server
  N8N_VERSION: latest
  N8N_BASIC_AUTH_USER: admin

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          cd ci
          go mod download

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          [ -n "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ] || { echo "DIGITALOCEAN_ACCESS_TOKEN is not set"; exit 1; }
          [ -n "${{ secrets.N8N_DOMAIN }}" ] || { echo "N8N_DOMAIN is not set"; exit 1; }
          [ -n "${{ secrets.N8N_ENCRYPTION_KEY }}" ] || { echo "N8N_ENCRYPTION_KEY is not set"; exit 1; }
          [ -n "${{ secrets.N8N_BASIC_AUTH_PASSWORD }}" ] || { echo "N8N_BASIC_AUTH_PASSWORD is not set"; exit 1; }
          echo "All required environment variables are set"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure Docker for DigitalOcean Registry
        run: |
          # Get registry name
          REGISTRY_NAME=$(doctl registry get --format Name --no-header)
          
          # Create Docker config directory if it doesn't exist
          mkdir -p ~/.docker
          
          # Configure Docker authentication for DigitalOcean registry
          doctl registry login --expiry-seconds 600
          
          # Verify Docker authentication by trying to pull an image (if it exists)
          docker pull registry.digitalocean.com/$REGISTRY_NAME/n8n:latest || true

      - name: Create SSH key
        id: ssh_setup
        run: |
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Generate a new ED25519 SSH key pair
          ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions-n8n"
          
          # Get the public key and fingerprint
          SSH_PUBLIC_KEY=$(cat ~/.ssh/id_ed25519.pub)
          SSH_KEY_FINGERPRINT=$(ssh-keygen -lf ~/.ssh/id_ed25519.pub | awk '{print $2}')
          
          # Add the key to DigitalOcean
          echo "Adding SSH key to DigitalOcean..."
          doctl compute ssh-key import github-actions-n8n --public-key-file ~/.ssh/id_ed25519.pub
          
          # Add known hosts
          ssh-keyscan -t rsa,ed25519 digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -t rsa,ed25519 registry.digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          
          # Set environment variables for ssh-agent
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_ed25519
          
          # Output the fingerprint for use in other steps
          echo "fingerprint=$SSH_KEY_FINGERPRINT" >> $GITHUB_OUTPUT

      - name: Deploy n8n
        env:
          DO_SSH_KEY_FINGERPRINT: ${{ steps.ssh_setup.outputs.fingerprint }}
          N8N_DOMAIN: ${{ secrets.N8N_DOMAIN }}
          N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
          N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
        run: |
          cd ci
          go run main.go

      - name: Cleanup SSH key
        if: always()
        run: |
          # Remove the SSH key from DigitalOcean
          KEY_ID=$(doctl compute ssh-key list --format ID,Name --no-header | grep github-actions-n8n | awk '{print $1}')
          if [ ! -z "$KEY_ID" ]; then
            doctl compute ssh-key delete $KEY_ID --force
          fi
          
          # Remove local SSH files
          rm -f ~/.ssh/id_ed25519*
