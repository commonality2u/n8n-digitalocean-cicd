name: Deploy n8n (GitHub Actions)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write
  packages: write
  statuses: write
  actions: read

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  DOCKER_REGISTRY: registry.digitalocean.com
  DROPLET_NAME: n8n-server
  N8N_VERSION: latest
  N8N_BASIC_AUTH_USER: admin
  # Senha simples para ambiente de teste (usuário: admin, senha: teste123)
  N8N_TEST_PASSWORD: "teste123"
  # Chave de criptografia padrão para ambiente de teste
  N8N_TEST_ENCRYPTION_KEY: "12345678901234567890123456789012"
  # Domínio padrão para ambiente de teste
  N8N_TEST_DOMAIN: "n8n.pepper88.com"

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      is_test_env: ${{ steps.check_env.outputs.is_test }}
      auth_password: ${{ steps.check_env.outputs.password }}
      encryption_key: ${{ steps.encryption_key.outputs.key }}
      domain: ${{ steps.check_env.outputs.domain }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate or Get Encryption Key
        id: encryption_key
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Em produção, usa a chave configurada ou gera uma nova
            if [ -n "${{ secrets.N8N_ENCRYPTION_KEY }}" ]; then
              echo "key=${{ secrets.N8N_ENCRYPTION_KEY }}" >> $GITHUB_OUTPUT
              echo "🔐 Using configured encryption key"
            else
              # Gera uma nova chave hexadecimal de 32 caracteres
              new_key=$(openssl rand -hex 16)
              echo "key=$new_key" >> $GITHUB_OUTPUT
              echo "🔐 Generated new encryption key: $new_key"
              echo "⚠️ Important: Save this key in your repository secrets for future use!"
            fi
          else
            # Em teste, usa a chave padrão
            echo "key=${{ env.N8N_TEST_ENCRYPTION_KEY }}" >> $GITHUB_OUTPUT
            echo "🔑 Using test encryption key"
          fi

      - name: Check environment
        id: check_env
        run: |
          # Determina se é ambiente de teste baseado na branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [ -z "${{ secrets.N8N_DOMAIN }}" ]; then
              echo "❌ Error: N8N_DOMAIN secret is not set for production"
              exit 1
            fi
            echo "is_test=false" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}" >> $GITHUB_OUTPUT
            echo "domain=${{ secrets.N8N_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "🔒 Production environment detected - using secure password"
            echo "🌐 Using production domain from secrets"
          else
            echo "is_test=true" >> $GITHUB_OUTPUT
            echo "password=${{ env.N8N_TEST_PASSWORD }}" >> $GITHUB_OUTPUT
            echo "domain=${{ env.N8N_TEST_DOMAIN }}" >> $GITHUB_OUTPUT
            echo "⚠️ Test environment detected - using simple password (teste123)"
            echo "🌐 Using test domain: ${{ env.N8N_TEST_DOMAIN }}"
          fi

      - name: Validate DigitalOcean Token
        run: |
          echo "🔍 Testing DigitalOcean API Token..."
          response=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            "https://api.digitalocean.com/v2/account")
          
          if echo "$response" | jq -e '.account' >/dev/null; then
            echo "✅ DigitalOcean API Token is valid"
          else
            echo "❌ Error: Invalid DigitalOcean API Token"
            echo "Response: $response"
            exit 1
          fi

      - name: Validate Domain
        run: |
          echo "🔍 Testing domain configuration..."
          domain="${{ steps.check_env.outputs.domain }}"
          
          # Verifica se o domínio está vazio
          if [ -z "$domain" ]; then
            echo "❌ Error: Domain is empty"
            echo "Check if N8N_DOMAIN secret is set correctly"
            exit 1
          fi
          
          # Verifica o comprimento do domínio
          if [ ${#domain} -lt 4 ] || [ ${#domain} -gt 253 ]; then
            echo "❌ Error: Invalid domain length: ${#domain} characters"
            echo "Domain length should be between 4 and 253 characters"
            exit 1
          fi
          
          # Verifica o formato do domínio
          if [[ ! "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
            echo "❌ Error: Invalid domain format"
            echo "Domain should be a valid hostname (e.g., n8n.example.com)"
            echo "Domain should:"
            echo "  - Start with a letter or number"
            echo "  - Contain only letters, numbers, and hyphens"
            echo "  - End with a valid TLD"
            echo "  - Not exceed 253 characters"
            exit 1
          fi
          
          echo "✅ Domain format is valid: $domain"
          
          # Em produção, verifica se o domínio resolve
          if [[ "${{ steps.check_env.outputs.is_test }}" != "true" ]] && ! host "$domain" >/dev/null 2>&1; then
            echo "⚠️ Warning: Domain $domain is not resolvable yet"
            echo "Make sure to configure DNS after deployment"
          fi

      - name: Summary
        run: |
          echo "🎉 All validations passed!"
          echo "Environment: ${{ steps.check_env.outputs.is_test == 'true' && 'TEST' || 'PRODUCTION' }}"
          if [ "${{ steps.check_env.outputs.is_test }}" == "true" ]; then
            echo "⚠️ Using test credentials:"
            echo "  - Username: admin"
            echo "  - Password: teste123"
            echo "  - Domain: ${{ env.N8N_TEST_DOMAIN }}"
            echo "  - Encryption Key: ${{ env.N8N_TEST_ENCRYPTION_KEY }}"
          fi

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    env:
      N8N_DOMAIN: ${{ needs.validate.outputs.domain }}
      N8N_ENCRYPTION_KEY: ${{ needs.validate.outputs.encryption_key }}
      N8N_BASIC_AUTH_PASSWORD: ${{ needs.validate.outputs.auth_password }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          cd ci
          go mod download

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure Docker for DigitalOcean Registry
        run: |
          # Get registry name
          REGISTRY_NAME=$(doctl registry get --format Name --no-header)
          
          # Create Docker config directory if it doesn't exist
          mkdir -p ~/.docker
          
          # Configure Docker authentication for DigitalOcean registry
          doctl registry login --expiry-seconds 600
          
          # Verify Docker authentication by trying to pull an image (if it exists)
          docker pull registry.digitalocean.com/$REGISTRY_NAME/n8n:latest || true

      - name: Create SSH key
        id: ssh_setup
        run: |
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write the SSH private key
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add known hosts
          ssh-keyscan -t rsa,ed25519 digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -t rsa,ed25519 registry.digitalocean.com >> ~/.ssh/known_hosts 2>/dev/null
          
          # Set environment variables for ssh-agent
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          
          # Test SSH key
          echo "Testing SSH key format:"
          ssh-keygen -l -f ~/.ssh/id_rsa || {
            echo "Error: Invalid SSH key"
            exit 1
          }

      - name: Deploy n8n
        env:
          DO_SSH_KEY_FINGERPRINT: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
          DO_SSH_KEY_ID: ${{ secrets.DO_SSH_KEY_ID }}
        run: |
          cd ci
          go run main.go

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa*
