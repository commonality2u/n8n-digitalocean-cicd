name: Deploy n8n

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Required secrets
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  DO_SSH_KEY_FINGERPRINT: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
  DO_SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}
  N8N_DOMAIN: ${{ secrets.N8N_DOMAIN }}
  N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}

  # Optional with defaults
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'registry.digitalocean.com' }}
  DROPLET_NAME: ${{ secrets.DROPLET_NAME || 'n8n-server' }}
  N8N_VERSION: ${{ secrets.N8N_VERSION || 'latest' }}
  N8N_BASIC_AUTH_USER: ${{ secrets.N8N_BASIC_AUTH_USER || 'admin' }}
  N8N_BASIC_AUTH_PASSWORD: ${{ secrets.N8N_BASIC_AUTH_PASSWORD || secrets.N8N_ENCRYPTION_KEY }}
  DO_SSH_KEY_PATH: ${{ secrets.DO_SSH_KEY_PATH || '~/.ssh/id_rsa' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          cd ci
          go mod download

      - name: Verify environment variables
        run: |
          echo "Checking required environment variables..."
          [ -n "$DIGITALOCEAN_ACCESS_TOKEN" ] || { echo "DIGITALOCEAN_ACCESS_TOKEN is not set"; exit 1; }
          [ -n "$DO_SSH_KEY_FINGERPRINT" ] || { echo "DO_SSH_KEY_FINGERPRINT is not set"; exit 1; }
          [ -n "$DO_SSH_PRIVATE_KEY" ] || { echo "DO_SSH_PRIVATE_KEY is not set"; exit 1; }
          [ -n "$N8N_DOMAIN" ] || { echo "N8N_DOMAIN is not set"; exit 1; }
          [ -n "$N8N_ENCRYPTION_KEY" ] || { echo "N8N_ENCRYPTION_KEY is not set"; exit 1; }
          echo "All required environment variables are set"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Configure Docker for DigitalOcean Registry
        run: |
          # Get registry name
          REGISTRY_NAME=$(doctl registry get --format Name --no-header)
          
          # Create Docker config directory if it doesn't exist
          mkdir -p ~/.docker
          
          # Configure Docker authentication for DigitalOcean registry
          doctl registry login --expiry-seconds 600
          
          # Verify Docker authentication by trying to pull an image (if it exists)
          docker pull registry.digitalocean.com/$REGISTRY_NAME/n8n:latest || true

      - name: Create SSH key file
        run: |
          set -x  # Enable debug mode to see what's happening
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Debug DNS resolution
          echo "Testing DNS resolution..."
          dig +short digitalocean.com || true
          dig +short registry.digitalocean.com || true
          
          # Try with direct IP addresses
          echo "Adding DigitalOcean hosts to known_hosts..."
          # DigitalOcean API endpoints
          ssh-keyscan -v -t rsa,ecdsa 167.99.122.236 >> ~/.ssh/known_hosts 2>&1 || true  # digitalocean.com
          ssh-keyscan -v -t rsa,ecdsa 159.89.98.145 >> ~/.ssh/known_hosts 2>&1 || true   # registry.digitalocean.com
          
          # Verify the contents
          echo "Checking SSH directory contents:"
          ls -la ~/.ssh/
          echo "Checking known_hosts content:"
          cat ~/.ssh/known_hosts
          
          # Verify SSH key
          echo "Verifying SSH key format..."
          ssh-keygen -l -f ~/.ssh/id_rsa || true

      - name: Deploy n8n
        run: |
          cd ci
          go run main.go
